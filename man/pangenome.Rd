% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pangenome.R
\name{pangenome}
\alias{pangenome}
\alias{infer_genePos}
\alias{build_repPangenome}
\alias{read_refSynOgHits}
\alias{add_nAnchor2gff}
\alias{lift_genePos}
\alias{fill_missingGenePos}
\title{Build genespace pangenome}
\usage{
pangenome(
  gsParam,
  refGenome = NULL,
  genomeIDs = NULL,
  verbose = NULL,
  allowRBHinOg = NULL
)

infer_genePos(hitsRef, blks, gff, gsParam, genomeIDs, refGenome)

build_repPangenome(gsParam, gff, gffRaw, infPos, refGenome)

read_refSynOgHits(gsParam, refGenome, genomeIDs, allowRBHinOg)

add_nAnchor2gff(gsParam, gff, hits)

lift_genePos(gff, hits, blks, maxGap, verbose, nCores, refGenome, genomeIDs)

fill_missingGenePos(hits, infGenePos, genomeIDs, gff, maxGap, verbose)
}
\arguments{
\item{gsParam}{A list of genespace parameters. This should be created
by setup_genespace, but can be built manually. Must have the following
elements: blast (file.path to the original orthofinder run), synteny (
file.path to the directory where syntenic results are stored), genomeIDs (
character vector of genomeIDs).}

\item{refGenome}{character string matching one of the genomeIDs in gsParam}

\item{genomeIDs}{character vector, specifying which genomes to use. Defaults
to all genomeIDs specification in gsParam.}

\item{verbose}{logical, specifying whether to print updates to the console.
Defaults to verbose specification in gsParam, unless specified here}

\item{allowRBHinOg}{logical, should synOGs be constructed aware of RBHs?}

\item{hitsRef}{hits data.table against the reference genome}

\item{blks}{data.table of block coordinates}

\item{gff}{gff with additional annotations columns (see synteny)}

\item{gffRaw}{raw gff from read_gff}

\item{infPos}{data.table with inferred gene positions}

\item{hits}{data.table of hits}

\item{maxGap}{integer specifying the maxiumum allowable gap between synOgs}

\item{nCores}{integer specifying the number of parallel processes to run}

\item{infGenePos}{data.table with inferred gene positions}
}
\value{
...
}
\description{
\code{pangenome} Convert orthogroup and synteny information into a
pangenome database. Predict locations of orthogroups that are missing a
node in the reference.

\code{pangenome} Predict locations in reference genome for all
genes and collapse into pangenome database

\code{infer_genePos} infer_genePos

\code{build_repPangenome} build_repPangenome

\code{read_refSynOgHits} read_refSynOgHits

\code{add_nAnchor2gff} add_nAnchor2gff

\code{lift_genePos} lift_genePos

\code{fill_missingGenePos} fill_missingGenePos
}
\details{
...
\enumerate{
\item genome1/2: the genome IDs for each pairwise run
\item uGenes1/2: the number of unique genes for each genome
\item query/target: the identity of query/target genomes in each blast run
\item run/mirrorBlast: logical whether the blast was run or mirrored
\item gn1/2: orthofinder genomeID numbers for each genome
\item db/fa/1/2/blFile: diamond database, fasta files and blast files.
}
}
\note{
\code{pangenome} is a generic name for the functions documented.
\cr
If called, \code{pangenome} returns its own arguments.
}
\examples{
\dontrun{
# coming soon
}
}
