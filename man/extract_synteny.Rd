% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_synteny.R
\name{extract_synteny}
\alias{extract_synteny}
\alias{pull_selfRegion}
\alias{split_hitsInBuffer}
\alias{cull_hitsByScore}
\alias{cluster_dbscan}
\alias{pull_blkBuff}
\alias{pull_buffSynteny}
\alias{cull_hitsWithinAnchorBounds}
\alias{run_mcscanx}
\alias{parse_hits2synteny}
\title{Find synteny between two genomes}
\usage{
extract_synteny(synParam, gsParam, gsAnnot, nCores = NULL, overwrite = FALSE)

pull_selfRegion(hits, synBuff)

split_hitsInBuffer(hits, synBuff, nCores)

cull_hitsByScore(hits, nHits1, nHits2, onlyOg)

cluster_dbscan(hits, nCores, radius, blkSize, dropSmallBlks)

pull_blkBuff(
  hits,
  allHits,
  blkSize,
  nGaps,
  path2mcscanx,
  synBuff,
  nCores,
  rerank
)

pull_buffSynteny(
  nHits1,
  nHits2,
  hits,
  onlyOg,
  blkSize,
  nGaps,
  nCores,
  path2mcscanx,
  synBuff,
  type
)

cull_hitsWithinAnchorBounds(hits, nCores)

run_mcscanx(hits, blkSize, nGaps, path2mcscanx)

parse_hits2synteny(
  blastDir,
  gffFiles,
  path2mcscanx,
  genomeID1,
  genomeID2,
  synParam,
  gff,
  ogv,
  nCores
)
}
\arguments{
\item{synParam}{file.path to the directory storing the input orthofinder
blast files and orthogroups.tsv. The orthogroups file can be in its
original subdirectory. Genesppace will only use the most recently modified
occurance of orthogroups.tsv in all subdirectories of blastDir.}

\item{gsParam}{A list of genespace parameters. This should be created
by setup_genespace, but can be built manually. Must have the following
elements: blast (file.path to the original orthofinder run) and ploidy
(integer vector of genome ploidies named by genomeIDs).}

\item{gsAnnot}{list of file locations for genespace annotation input files.
Alternatively, a named list containing element 'gff' which is a named vector
of the file paths to the gff-like genespace input file.}

\item{nCores}{integer of length 1 specifying the number of parallel processes
to run}

\item{hits}{data.table containing annotated blast-format pairwise hits}

\item{synBuff}{integer of length 1 specifying the maximum euclidean distance
from an 'anchor' so that it can be considered syntenic}

\item{nHits1}{integer of length 1 specifying the number of hits to retain for
each gene in genome1}

\item{nHits2}{integer of length 1 specifying the number of hits to retain for
each gene in genome2}

\item{onlyOg}{logical, should only orthogroups be considered?}

\item{radius}{numeric of length 1 specifying the eps dbscan parameter; the
search radius within which to count clustered density-based xy points.}

\item{blkSize}{integer of length 1 specifying the minimum size for a syntenic
block and the -s 'size' MCScanX parameter}

\item{dropSmallBlks}{logical, should hits in blocks that are too small be
dropped from the dataset?}

\item{allHits}{data.table with the full set of hits to search through}

\item{nGaps}{integer of length 1 specifying the -m 'gaps' MCScanX paramerter}

\item{path2mcscanx}{character string file.path pointing to the install
directory for the MCScanX program. In particular, there must be an
executable in this directory for MCScanX_h.}

\item{rerank}{logical, should hits be reranked?}

\item{type}{character string added to the 'type' column of the hits object}

\item{blastDir}{file.path to the directory storing the input orthofinder
blast files and orthogroups.tsv. The orthogroups file can be in its
original subdirectory. Genesppace will only use the most recently modified
occurance of orthogroups.tsv in all subdirectories of blastDir.}

\item{gffFiles}{named vector of file paths pointing to the parsed gff-like
annotation files}

\item{genomeID1}{character string specifying the first genome to consider}

\item{genomeID2}{character string specifying the second genome to consider}
}
\value{
a 'hits' data.table for a pairwise combination of genomes.
}
\description{
\code{extract_synteny} Typically only used internally as part of the
syntenic_orthogroups pipeline.

\code{extract_synteny} Main engine for synteny extraction in GENESPACE.

\code{pull_selfRegion} For an intra-genomic hits data.table only, a faster method to
extract just the region around the self hits.

\code{pairwise_syntenyUtils} Use fixed-radius nearest-neighbor searches for
all hits within a buffer around anchors. Hits data.table must have a column
called 'isAnchor' specifying whether the hit is an anchor or one to be
assigned as inside or outside of the buffer.

\code{cull_hitsByScore} Subset a hits data.table based on the rank order
of the bit score ('score' column) for each unique gene ID ('ofID1/2' columns)

\code{cluster_dbscan} Build density-based 2d clusters based on the ord1 and
ord2 columns in a hits data.table.

\code{pull_blkBuff} Given a hits object and synteny parameters, extract
synteny regions by culling to syntenic 'anchors' then pull all hits within
a buffer around the anchors.

\code{pull_selfHomeologSynteny} Given ploidy for a genome and a self-hit
region masked hits data table, pull out syntenic regions.

\code{pull_selfHomeologSynteny} Given ploidy for a genome and a self-hit
region masked hits data table, pull out syntenic regions.

\code{run_mcscanx} Calculate MCScanX 'collinearity' from an annotated
blast-formatted data.table

\code{parse_hits2synteny} Find synteny between two genomes and pull all hits
within specified buffer
}
\details{
The main engine for GENESPACE synteny searching. This
finds syntenic 'anchors' that are high-confidence synteny- and homology-
constrained hits, then pulls nearby hits within a specified buffer around
'anchor' hits between two genomes. Combined, this provides a framework to
both analyze syntenic duplicates (e.g. tandem arrays) and have high
confidence that only the desired types of hits (orthologs, homoeologs, etc.)
are considered.

The basic premise is that we can find synteny in haploid genome comparisons (most
diploid species have haploid genome representations) best by first
constraining the initial search to the single best scoring pairwise hits for
each gene. Then, if desired further subsetting this set to only gene pairs
that fall into the same orthogroups. This approach effectively removes
relic syntenic regions from ancient whole genome duplications and produces
a set of high-confidence synteny "anchors" which serve as known positions of
syntenic (ortho/para/homeolo)gous regions. We then search in a fixed-radius
for nearest neighbors within a gene-rank order buffer around the anchors. For
intra-genomic hits, the self hits are the anchors and a buffer is calculated
via euclidean distance. For intra-genomic hits in polyploids, the self-hit
regions are masked and the synteny search is re-run to more effectively find
homeologs.

It is important to note that this does NOT produce finalized block
coordinates, but only large-scale regions that are syntenic. These results
are usually passed to an additional orthofinder run, either globally, or for
polyploids or searches with paralogs, within-block pairwise runs. See
rerun_orthofinder.

Parameterization of this function is complex and varies by the type of
contrast desired. To simplify parameterization, we have build a convenience
function that infers various parameters based on basic
genespace parameters and ploidy. Set set_syntenyParams for more information
about the input synParam data.table.
}
\examples{
\dontrun{
# coming soon
}
}
\seealso{
set_syntenyParams pairwise_syntenyUtils
}
\author{
JT Lovell
}
